#!/grid/common/pkgs/python/v3.7.2/bin/python3.7
"""
-------------------------------------------------------------------------------
  Project     : Cadence Production Diags
  File        : serdes_analysis_parser.py
  Company     : Cadence Design Systems
  Author      : Tiago da Costa Ferreira
  Version     : v0.1
--------------------------------- CONFIDENTIAL --------------------------------

                Copyright 2022 by Cadence Design Systems, Inc.

  All  rights reserved.   No part  of  this source  code may  be reproduced  or
  transmitted in any form or by  any means, electronic or mechanical, including
  photocopying,  recording, or  any information  storage and  retrieval system,
  without permission in writing from Cadence Design Systems, Inc.

  Further, no use of this source code is permitted in any form or means without
  a valid, written license agreement with Cadence Design Systems, Inc.

                            Cadence Design Systems
                                www.cadence.com
-------------------------------------------------------------------------------
"""


import argparse
import pandas as pd
import os
import utils
import re
import sql

DESCRIPTION = """ A script that reads a serdes_analysis file generated by hcu
team. The file is a xsls file with information about serdes lanes and the
script search for bad lanes, then parse it in a python data structure that can
be used by others scripts.
"""


def setup():
    settings = {}
    settings["xlsx_fields"] = [
        "tx",
        "rx",
        "txBrd",
        "txChip",
        "txLane",
        "rxBrd",
        "rxChip",
        "rxLane",
        "txBrdVer",
        "rxBrdVer",
        "FirstOccurence",
        "LastOccurence",
        ]
    return settings


def load_xlsx(file_path):
    """ Reads a xlsx files and return its content as a pandas object"""
    if not os.path.exists(file_path):
        return None
    name, extension = os.path.splitext(file_path)
    if extension != ".xlsx":
        return None
    excel_data = pd.read_excel(file_path)
    return excel_data


def scan_for_bad_lanes(pd_data, lane_condition):
    """ Filters lanes based on its condition """
    lanes_conditions = {
        "dead": 0,
        "very safe": 1,
        "potential bad": 2,
        "somewhat safe": 3,
        "very bad": 4
    }

    excel_column = lanes_conditions[lane_condition]
    data = pd.DataFrame(pd_data)
    filter_column = data.iloc[:, excel_column]
    filtered_data = data.loc[filter_column == 1]

    return filtered_data


def parse_lanes(fields_locations, filtered_lanes):
    """ Return lanes data as a table containing relevant data and number of rows"""
    matrix = {"rowCount": len(filtered_lanes.index)}
    for name, number in fields_locations.items():
        matrix[name] = list(filtered_lanes.iloc[:, int(number)])

    return matrix

def sea_urchin_converter(board_type, chip_number):
    """ Make adjustment to sea urchin chip number accordingly do type of board"""
    su_ld_offset = 8
    su_sod_offset = 16
    print(chip_number)

    if "LD" in board_type.upper():
        return int(chip_number) - su_ld_offset
    elif "SOD" in board_type.upper():
        return int(chip_number) - su_sod_offset

def get_db_name(file_path):
    """ Gets database name based on file name. File name is generally like:
    serdes_analysis_<db name>_<start date>_<end_date>"""
    db_name = None
    file_dir, file_name = os.path.split(file_path)
    pattern = "serdes_analysis_([\w_]*?)_\d{4}.*"
    re_pattern = re.compile(pattern)
    match = re_pattern.match(file_name)
    if match:
        db_name = match.group(1)

    return db_name

def get_db_data(list_of_lanes, db_handlers):
    for type_of_measure, handler in db_handlers.items():
        for lane in list_of_lanes:
            for tx_rx in lane:
                print(tx_rx)
        pass

def main():
    cmd_parse = argparse.ArgumentParser(description=DESCRIPTION)
    cmd_parse.add_argument("-f",
                           default=None,
                           help="Xlsx file absolute path")
    opts = cmd_parse.parse_args()
    settings = setup()
    fields_locations = utils.get_xlsx_header_number(settings["xlsx_fields"],
                                                    opts.f)
    pd_data = load_xlsx(opts.f)
    filtered_lanes = scan_for_bad_lanes(pd_data, "very bad")
    parsed_lanes = parse_lanes(fields_locations, filtered_lanes)
    list_of_lanes = []

    for i in range(parsed_lanes["rowCount"]):
        address = parsed_lanes['tx'][i].split("-")
        rcb = "-".join(address[0:3])
        board = "LD" if address[0] == "5" else "SOD"
        chip_type = "SU" if address[1] == "0" else "SD"
        chip_number = parsed_lanes['txChip'][i]
        # correct if seaurchin (needs to subtract a offset to match logs)
        if chip_type == "SU":
            chip_number = sea_urchin_converter(board, chip_number)
        tx_info = {
            "rcb": rcb,
            "board": board,
            "chip_type": chip_type,
            "chip_number": chip_number
        }

        address = parsed_lanes['rx'][i].split("-")
        rcb = "-".join(address[0:3])
        board = "LD" if address[0] == "5" else "SOD"
        chip_type = "SU" if address[1] == "0" else "SD"
        chip_number = parsed_lanes['rxChip'][i]
        # correct if seaurchin (needs to subtract a offset to match logs)
        if chip_type == "SU":
            chip_number = sea_urchin_converter(board, chip_number)
        rx_info = {
            "rcb": rcb,
            "board": board,
            "chip_type": chip_type,
            "chip_number": chip_number
        }

        lane_info = (tx_info, rx_info)
        list_of_lanes.append(lane_info)
    print(list_of_lanes)
    db_name = get_db_name(opts.f)
    print(db_name)
    voltage_handler = sql.Voltage(db_name=db_name)
    temperature_handler = sql.Temperature(db_name=db_name)
    db_handlers = {"voltage": voltage_handler,
                   "temperature": temperature_handler}
    get_db_data(list_of_lanes, db_handlers)
    print(voltage_handler.search_device_by_date(device="EDV_UNI_SD_5_0",
    rcb="1 0 2", start="2022-08-05 00:00:01", end="2022-08-05 00:10:00",
    btype="LD", debug=True))

if __name__ == "__main__":
    main()
