#!/grid/common/pkgs/python/v3.7.2/bin/python3.7
"""
-------------------------------------------------------------------------------
  Project     : Cadence Production Diags
  File        : serdes_analysis_parser.py
  Company     : Cadence Design Systems
  Author      : Tiago da Costa Ferreira
  Version     : v0.1
--------------------------------- CONFIDENTIAL --------------------------------

                Copyright 2022 by Cadence Design Systems, Inc.

  All  rights reserved.   No part  of  this source  code may  be reproduced  or
  transmitted in any form or by  any means, electronic or mechanical, including
  photocopying,  recording, or  any information  storage and  retrieval system,
  without permission in writing from Cadence Design Systems, Inc.

  Further, no use of this source code is permitted in any form or means without
  a valid, written license agreement with Cadence Design Systems, Inc.

                            Cadence Design Systems
                                www.cadence.com
-------------------------------------------------------------------------------
"""


import argparse
import pandas as pd
import os

DESCRIPTION = """ A script that reads a serdes_analysis file generated by hcu
team. The file is a xsls file with information about serdes lanes and the
script search for bad lanes, then parse it in a python data structure that can
be used by others scripts.
"""


def load_xlsx(file_path):
    """ Reads a xlsx files and return its content as a pandas object"""
    if not os.path.exists(file_path):
        return None
    name, extension = os.path.splitext(file_path)
    if extension != ".xlsx":
        return None
    excel_data = pd.read_excel(file_path)
    return excel_data


def scan_for_bad_lanes(pd_data, lane_condition):
    lanes_conditions = {
        "dead": 0,
        "very safe": 1,
        "potential bad": 2,
        "somewhat safe": 3,
        "very bad": 4
    }

    excel_column = lanes_conditions[lane_condition]
    data = pd.DataFrame(pd_data)
    filter_column = data.iloc[:, excel_column]
    filtered_data = data.loc[filter_column == 1]

    return filtered_data

def parse_lanes(filtered_lanes):
    print(list(filtered_lanes.iloc[:,10]))


def main():
    cmd_parse = argparse.ArgumentParser(description=DESCRIPTION)
    cmd_parse.add_argument("-f",
                           default=None,
                           help="Xlsx file absolute path")
    opts = cmd_parse.parse_args()

    pd_data = load_xlsx(opts.f)
    filtered_lanes = scan_for_bad_lanes(pd_data, "very bad")
    parsed_lanes = parse_lanes(filtered_lanes)

if __name__ == "__main__":
    main()
