#!/grid/common/pkgs/python/v3.7.2/bin/python3.7
"""
-------------------------------------------------------------------------------
  Project     : Cadence Production Diags
  File        : install.py
  Company     : Cadence Design Systems
  Author      : Tiago da Costa Ferreira
  Version     : v0.1
--------------------------------- CONFIDENTIAL --------------------------------

                Copyright 2022 by Cadence Design Systems, Inc.

  All  rights reserved.   No part  of  this source  code may  be reproduced  or
  transmitted in any form or by  any means, electronic or mechanical, including
  photocopying,  recording, or  any information  storage and  retrieval system,
  without permission in writing from Cadence Design Systems, Inc.

  Further, no use of this source code is permitted in any form or means without
  a valid, written license agreement with Cadence Design Systems, Inc.

                            Cadence Design Systems
                                www.cadence.com
-------------------------------------------------------------------------------
"""

import os
import sys
import subprocess
import logging
import paramiko
from paramiko_expect import SSHClientInteraction
import json


def config(json_file):
    """
    Initial configurations. Config logger and reads info from json file
    
    Parameters:
        json_file (str): Path to json file
    
    Returns:
        config (dict): A dict with relevant info from json file
    """
    logging.basicConfig(format='%(asctime)s %(name)s %(levelname)s %(message)s',
                        datefmt='%Y-%m-%d %H:%M:%S',
                        level=logging.INFO,
                        handlers=[
                            logging.FileHandler("dashboard_install.log"),
                            logging.StreamHandler()
                        ])

    #paramiko.util.logging.getLogger().setLevel(logging.WARN)
    logging.getLogger('paramiko').setLevel(logging.WARN)

    with open(json_file) as file:
        data = json.load(file)

    command = ["hostname"]
    proc = subprocess.run(command, capture_output=True, text=True)
    hostname = proc.stdout.strip()
    data["hostname"] = hostname

    command = ["whoami"]
    proc = subprocess.run(command, capture_output=True, text=True)
    user = proc.stdout.strip()
    data["user"] = user

    return data

def search_container():
    """
    Search for the docker container ip assuming the default name for it.
    The default name is hcu_<hostname>

    Parameters:
        None

    Returns:
        ip (str): The ip of the docker container
    """
    command = ["hostname"]
    proc = subprocess.run(command, capture_output=True, text=True)
    hostname = proc.stdout.strip()

    command = ["whoami"]
    proc = subprocess.run(command, capture_output=True, text=True)
    user = proc.stdout.strip()

    command = [] if user == "root" else ["sudo"]
    command += ["docker",
                "inspect",
                "-f",
                "\"{{ .NetworkSettings.IPAddress }}\"",
                f"hcu_{hostname}"
                ]
    proc = subprocess.run(command, capture_output=True, text=True)
    ip = proc.stdout.strip().strip("\"")

    return ip

class Container:

    def __init__(self, ip, user, password):
        self.ip = ip
        self.user = user
        self.password = password
        print(ip, user, password)

    def run_command(self, cmd):
        print(cmd)
        ssh_client = paramiko.SSHClient()
        ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh_client.connect(hostname=self.ip, username=self.user,
                           password=self.password)

        (stdin, stdout, stderr) = ssh_client.exec_command(cmd)
        self.stdout = stdout
        print(stdout.readlines())
        print(stderr.readlines())
        self.exit_code = stdout.channel.recv_exit_status()
        print(self.exit_code)
        ssh_client.close()

    def run_command_interactive(self, cmd):
        ssh_client = paramiko.SSHClient()
        ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh_client.connect(hostname=self.ip, username=self.user,
                            password=self.password)
        with SSHClientInteraction(ssh_client, display=True) as interact:
            interact.expect(".*~].*", timeout=100)
            interact.send(cmd)
            interact.expect(".*~].*", timeout=100)
            self.stdout = interact.current_output_clean

        ssh_client.close()

    def scp(self, source, dest):
        try:
            ssh_client = paramiko.SSHClient()
            ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            ssh_client.connect(hostname=self.ip, username=self.user,
                            password=self.password)
            ftp_client = ssh_client.open_sftp()
            ftp_client.put(source, dest)
            ftp_client.close()
            ssh_client.close()
            logging.info(f"Golden file {source} cloned to container to {dest}")
        except Exception as e:
            logging.error(e)

    def set_required(self, required_dict):
        self.required_dict = required_dict
        self.has_required_system = dict((el, False) for el
                                        in required_dict["linux"])
        self.has_required_python = dict((el, False) for el
                                        in required_dict["python"])

    def test_required(self):
        system_apps = self.required_dict["linux"]
        python_apps = self.required_dict["python"]
        message = ("The list of required applications are "
                   f"{system_apps + python_apps}")
        logging.info(message)

        for app in system_apps:
            cmd = f"command -v {app}"
            self.run_command(cmd)
            if self.exit_code != 0:
                logging.warning(f"There is no {app} installed.")
                self.has_required_system[app] = False
            else:
                logging.info(f"Found {app} installed in system")
                self.has_required_system[app] = True

        for app in python_apps:
            cmd = f"pip3 show {app}"
            self.run_command(cmd)
            if self.exit_code != 0:
                logging.warning(f"There is no {app} installed.")
                self.has_required_python[app] = False
            else:
                logging.info(f"Found {app} installed in system")
                self.has_required_python[app] = True

        all_dependencies_ok = True

        for app in self.has_required_system.keys():
            status = self.has_required_system[app]
            if not status:
                logging.info((f"The {app} application is not installed in"
                             "system. Trying to install"))
                cmd = f"yum install {app}"
                self.run_command(cmd)
                if self.exit_code == 0:
                    logging.info(f"The {app} has been successfully installed")
                else:
                    logging.info((f"Could not install {app}, "
                                  "please try to install it manually"))
                    all_dependencies_ok = False

        for app in self.has_required_python.keys():
            status = self.has_required_python[app]
            print(app, status)
            if not status:
                logging.info((f"The {app} application is not installed in"
                             "system. Trying to install"))
                cmd = f"pip3 install {app}"
                self.run_command(cmd)
                if self.exit_code == 0:
                    logging.info(f"The {app} has been successfully installed")
                else:
                    logging.info((f"Could not install {app}, "
                                  "please try to install it manually"))
                    all_dependencies_ok = False

        return all_dependencies_ok

if __name__ == "__main__":
    config = config("./config.json")
    print(config)
    logging.info("Getting container ip...")
    container_ip = search_container()
    print(container_ip)
    logging.info(f"Container ip is {container_ip}")
    logging.info("Checking for the required applications on container...")
    container = Container(ip=container_ip,
                           user=config["container access"]["user"],
                           password=config["container access"]["password"])
    container.set_required(config["required"])
    all_dependencies_ok = container.test_required()
    if not all_dependencies_ok:
        print(("Could not install all required dependencies. Please check logs"
               "and try manually install the required applications"))
        exit(1)

    # dependencies ok, check server configs
    current_dir = os.getcwd()
    dest_dir = config["server"]["service_path"]
    user = config["user"]
    hostname = config["hostname"]
    # copy golden file
    source_path = f"{current_dir}/hcu-web-backend.service.golden"
    dest_path = f"{dest_dir}/hcu-web-backend.service"
    container.scp(source_path, dest_path)
    # start service
    cmd = "systemctl stop hcu-web-backend"
    container.run_command_interactive(cmd)
    cmd = "systemctl start hcu-web-backend"
    container.run_command_interactive(cmd)
    cmd = "systemctl status hcu-web-backend"
    container.run_command_interactive(cmd)
    logging.info("Status of hcu-web backend service:")
    logging.info(container.stdout)
    # parse this latter

    # verify nginx files
    # copy golden file
    dest_dir = config["server"]["nginx_path"]
    source_path = f"{current_dir}/nginx.conf.golden"
    dest_path = f"{dest_dir}/nginx.conf"
    container.scp(source_path, dest_path)
    # reload nginx
    cmd = "nginx -s reload"
    container.run_command(cmd)
